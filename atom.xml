<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhongfei2016.github.io/</id>
    <title>NOTES</title>
    <updated>2019-11-03T13:58:23.725Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhongfei2016.github.io/"/>
    <link rel="self" href="https://zhongfei2016.github.io//atom.xml"/>
    <subtitle>Life is struggle.</subtitle>
    <logo>https://zhongfei2016.github.io//images/avatar.png</logo>
    <icon>https://zhongfei2016.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, NOTES</rights>
    <entry>
        <title type="html"><![CDATA[Spark按特定列差值分组并计算每组统计值]]></title>
        <id>https://zhongfei2016.github.io//post/spark-an-te-ding-lie-chai-zhi-fen-zu-bing-ji-suan-mei-zu-tong-ji-zhi</id>
        <link href="https://zhongfei2016.github.io//post/spark-an-te-ding-lie-chai-zhi-fen-zu-bing-ji-suan-mei-zu-tong-ji-zhi">
        </link>
        <updated>2019-10-27T15:00:35.000Z</updated>
        <content type="html"><![CDATA[<p>源数据如下：<br>
id,time,speed,mile<br>
c1,2019-10-27 22:41:15,13,5000<br>
c1,2019-10-27 22:41:25,18,5035<br>
c1,2019-10-27 22:41:36,25,5075<br>
c1,2019-10-27 22:41:47,32,5115<br>
c1,2019-10-27 22:41:55,40,5155<br>
c1,2019-10-27 22:42:04,41,5205<br>
c1,2019-10-27 22:42:15,37,5255<br>
c1,2019-10-27 22:42:25,33,5325<br>
c1,2019-10-27 22:48:15,13,6000<br>
c1,2019-10-27 22:48:25,18,6035<br>
c1,2019-10-27 22:48:36,25,6075<br>
c1,2019-10-27 22:48:47,32,6115<br>
c1,2019-10-27 22:48:55,40,6155<br>
c1,2019-10-27 22:49:04,41,6205<br>
c1,2019-10-27 22:49:15,37,6255<br>
c1,2019-10-27 22:49:25,33,6325</p>
<pre><code>import operation.GroupTagFunction;
import operation.TimeFormatFunction;
import org.apache.spark.SparkConf;
import org.apache.spark.sql.Column;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SQLContext;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.sql.expressions.Window;
import org.apache.spark.sql.expressions.WindowSpec;
import org.apache.spark.sql.functions;
import org.apache.spark.sql.types.DataTypes;
import org.apache.spark.sql.types.Metadata;
import org.apache.spark.sql.types.StructField;
import org.apache.spark.sql.types.StructType;

import java.util.ArrayList;
import java.util.List;

public class StatisticDemo {
    public static void main(String[] args) {
        // 初始化sparkSession local[*]表示CPU满载运行
        SparkConf sparkConf = new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;spark demo&quot;);
        SparkSession sparkSession
                = SparkSession.builder().config(sparkConf).getOrCreate();
        // 注册自定义函数，用于获取超过阈值时间差的分组tag
        SQLContext context = sparkSession.sqlContext();
        context.udf().register(&quot;groupTagFunction&quot;, new GroupTagFunction(), DataTypes.LongType);
        context.udf().register(&quot;timeFormatFunction&quot;, new TimeFormatFunction(), DataTypes.LongType);

        List&lt;StructField&gt; fields = new ArrayList&lt;&gt;() {{
            add(new StructField(&quot;id&quot;, DataTypes.StringType, false, Metadata.empty()));
            add(new StructField(&quot;time&quot;, DataTypes.StringType, false, Metadata.empty()));
            add(new StructField(&quot;speed&quot;, DataTypes.IntegerType, false, Metadata.empty()));
            add(new StructField(&quot;mile&quot;, DataTypes.IntegerType, false, Metadata.empty()));
        }};
        StructType structType = DataTypes.createStructType(fields);

        Dataset&lt;Row&gt; dataset = sparkSession.read().schema(structType)
                .option(&quot;header&quot;, &quot;true&quot;)
                .csv(&quot;C:\\codes\\java\\demos\\SparkDemo\\src\\main\\resources\\src_data.csv&quot;);
        dataset.show();


        // 定义时间窗列
        WindowSpec windowSpec = Window.partitionBy(new Column(&quot;id&quot;)).orderBy(new Column(&quot;time&quot;));
        // 定义上一行时间戳列
        Column lagTimeStamp = functions.lag(functions.callUDF(&quot;timeFormatFunction&quot;, new Column(&quot;time&quot;)), 0).over(windowSpec);
        Column timeStamp = functions.callUDF(&quot;timeFormatFunction&quot;, new Column(&quot;time&quot;));
        Column timeDiff = timeStamp.minus(lagTimeStamp);

        Dataset&lt;Row&gt; tagDataset = dataset.withColumn(&quot;lagTimeStamp&quot;, lagTimeStamp)
                .withColumn(&quot;timeStamp&quot;, timeStamp)
                .withColumn(&quot;timeDiff&quot;, timeDiff);
        tagDataset.show();
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java强、软、弱引用]]></title>
        <id>https://zhongfei2016.github.io//post/java-qiang-ruan-ruo-yin-yong</id>
        <link href="https://zhongfei2016.github.io//post/java-qiang-ruan-ruo-yin-yong">
        </link>
        <updated>2019-10-20T14:23:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="强引用">强引用</h3>
<p>强引用就是我们每天在java中用到的最常见的引用，比如String str= new String(&quot;str&quot;);<br>
强引用不会被gc掉，即便JVM发生OOM也不会gc强引用。</p>
<h3 id="弱引用">弱引用</h3>
<p>弱引用则可以是你定义的对象无法一直保存在内存中，一个对象可以同时被多个引用指向，如果某个时刻某个对象不再有强引用指向他，那他就会被GC。<br>
假设垃圾收集器在某个时间点决定一个对象是弱可达的(weakly reachable)（也就是说当前指向它的全都是弱引用），这时垃圾收集器会清除所有指向该对象的弱引用，然后垃圾收集器会把这个弱可达对象标记为可终结(finalizable)的，这样它们随后就会被回收。与此同时或稍后，垃圾收集器会把那些刚清除的弱引用放入创建弱引用对象时所登记到的引用队列(Reference Queue)中。</p>
<h3 id="软引用">软引用</h3>
<p>软引用则比弱引用强一些，即如果内存满了时候，才会把没有强引用而只有软引用的对象GC掉，如果内存未满，即便没有强引用指向他，也不会被GC。</p>
<pre><code>
public static void main(String[] args)
    {
        String str = new String(&quot;originString&quot;);
        SoftReference&lt;String&gt; softStr = new SoftReference&lt;&gt;(str);
        WeakReference&lt;String&gt; weakStr = new WeakReference&lt;&gt;(str);
        // 强制进行垃圾回收
        System.gc();
        System.runFinalization();
        // 此时由于有强引用指向对象，所以不被回收
        System.out.println(softStr.get());
        System.out.println(weakStr.get());
        // 取消强引用
        str = null;
        System.gc();
        System.runFinalization();
        // 此时由于内存足够，软引用对象并没有被回收
        System.out.println(softStr.get());
        // 虽然没有强引用指向，但此时由于内存足够，而且还有软引用，所以对象并没有被回收
        System.out.println(weakStr.get());
        // 取消软引用
        softStr = null;
        System.gc();
        System.runFinalization();
        // 此时强软引用都没有了，所以只要gc，弱引用指向的对象就被回收了
        System.out.println(weakStr.get());
    }
</code></pre>
<p>打印结果：<br>
originString<br>
originString<br>
originString<br>
originString<br>
Null<br>
上述调用是因为直接调用System.gc()只会把这次gc请求记录下来，等到runFinalization=true的时候才会先去执行GC，runFinalization=true之后会在允许一次system.gc()。之后在call System.gc()还会重复上面的行为。所以System.gc()要跟System.runFinalization()一起搭配使用才好。<br>
https://xindoo.blog.csdn.net/article/details/87868480<br>
https://www.cnblogs.com/android-blogs/p/5566277.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[单例模式]]></title>
        <id>https://zhongfei2016.github.io//post/dan-li-mo-shi</id>
        <link href="https://zhongfei2016.github.io//post/dan-li-mo-shi">
        </link>
        <updated>2019-10-20T14:19:52.000Z</updated>
        <content type="html"><![CDATA[<p>单例模式是常用的设计模式，旨在一次加载，全周期使用，但是如果使用不当，仍然会造成单例多实例化或者实例化未完成即使用的问题。</p>
<pre><code>public class SingleInstance{
    private static volatile SingleInstance instance = null;
    private SingleInstance(){}
    public static SingleInstance getInstance(){
        if(instance == null){
            synchronized(SingleInstance.class){
                if(instance == null){
                    instance = new SingleInstance();
                }        
            }
        }
        return instance;    
    }
}
</code></pre>
<p>参考：https://www.iteye.com/blog/icyfenix-575052</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[转载] Kafka单元测试方法]]></title>
        <id>https://zhongfei2016.github.io//post/kafka-dan-yuan-ce-shi-fang-fa</id>
        <link href="https://zhongfei2016.github.io//post/kafka-dan-yuan-ce-shi-fang-fa">
        </link>
        <updated>2019-10-18T13:51:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="代码如下">代码如下：</h3>
<pre><code>import kafka.server.KafkaConfig;
import kafka.server.KafkaServerStartable;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.zookeeper.server.ZooKeeperServerMain;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Properties;

public class KafkaProduceTest {
    private static final String TOPIC = &quot;topic-1&quot;;
    private static final String BROKERHOST = &quot;127.0.0.1&quot;;
    private static final String BROKERPORT = &quot;9092&quot;;
    private static final String ZKPORT = &quot;2181&quot;;

    private String nodeId = &quot;0&quot;;
    private String zkConnect = &quot;localhost:&quot; + ZKPORT;
    private KafkaServerStartable server;
    KafkaProducer&lt;Integer, byte[]&gt; producer;

    @Before
    public void setup() throws IOException {
        //zookeeper
        startZK();
        //start kafka
        startKafka();
        // setup producer
        setupProducer();
    }

    @After
    public void tearDown() throws Exception {
        server.shutdown();
        server.awaitShutdown();
    }

    private static void startZK() throws IOException {
        final File zkTmpDir = File.createTempFile(&quot;zookeeper&quot;, &quot;test&quot;);
        zkTmpDir.delete();
        zkTmpDir.mkdir();

        new Thread() {
            @Override
            public void run() {
                ZooKeeperServerMain.main(new String[]{ZKPORT, zkTmpDir.getAbsolutePath()});
            }
        }.start();

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }
    }

    private void startKafka() {
        Properties props = new Properties();
        props.put(&quot;broker.id&quot;, nodeId);
        props.put(&quot;port&quot;, BROKERPORT);
        props.put(&quot;zookeeper.connect&quot;, zkConnect);
        props.put(&quot;host.name&quot;, &quot;127.0.0.1&quot;);
        KafkaConfig conf = new KafkaConfig(props);
        server = new KafkaServerStartable(conf);
        server.startup();
    }

    private void setupProducer() {
        Properties producerProps = new Properties();
        producerProps.setProperty(&quot;bootstrap.servers&quot;, BROKERHOST + &quot;:&quot; + BROKERPORT);
        producerProps.setProperty(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.IntegerSerializer&quot;);
        producerProps.setProperty(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.ByteArraySerializer&quot;);
        producer = new KafkaProducer&lt;&gt;(producerProps);
    }

    @Test
    public void testSparkWordCount() throws Exception {
        for (int i = 0; i &lt; 1000; i++) {
            producer.send(new ProducerRecord&lt;&gt;(TOPIC, 0, 1, (&quot;There are some words here to count -&quot; + Integer.toString(i)).getBytes(Charset.forName(&quot;UTF-8&quot;))));
            Thread.sleep(10);
        }
        System.out.println(&quot;End Test&quot;);
    }
}
</code></pre>
<h3 id="pom依赖">pom依赖</h3>
<pre><code>        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;
            &lt;artifactId&gt;kafka_2.12&lt;/artifactId&gt;
            &lt;version&gt;2.1.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;log4j&lt;/groupId&gt;
            &lt;artifactId&gt;log4j&lt;/artifactId&gt;
            &lt;version&gt;1.2.17&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
</code></pre>
<p>转载自：<br>
https://ransilberman.com/2013/07/19/how-to-unit-test-kafka/</p>
<p>stackoverflow上有这样一个问题：<br>
How can I instantiate a Mock Kafka Topic for junit tests?<br>
通过模拟一个kafka主题来对kafka进行单元测试，参考：<br>
https://stackoverflow.com/questions/33748328/how-can-i-instantiate-a-mock-kafka-topic-for-junit-tests</p>
<p>另外可以参考：<br>
https://gist.github.com/asmaier/6465468</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[if...else替代方式]]></title>
        <id>https://zhongfei2016.github.io//post/ifelse-ti-dai-fang-shi</id>
        <link href="https://zhongfei2016.github.io//post/ifelse-ti-dai-fang-shi">
        </link>
        <updated>2019-09-28T14:21:20.000Z</updated>
        <content type="html"><![CDATA[<p>在业务代码判断逻辑中可能会遇到大量的if...else判断，如果直接使用如下方式：</p>
<pre><code>if(...) {
    ...
} else if(...) {
    ...
} else {
    ...
}
</code></pre>
<p>会使得代码臃肿且易读性降低，包括后续findbugs等检查都会有问题，所以需要提供更好的方式来实现。</p>
<h2 id="表驱动法">表驱动法</h2>
<p>通过定义一个数组，并在数组的指定索引位置给定结果值的方式来返回结果，即将输入值作为数组索引，直接通过结果值组成的数组，把入参当索引返回结果值：</p>
<pre><code>private static int getScore(int num)
{
    int[] scores = {30, 28, 22, 16, 8, 5};
    if (num &gt;= 0 &amp;&amp; num &lt;= 5)
    {
        return scores[num];
    }
    return 0;
}
</code></pre>
<p>如果入参比较大，比如0-100这样的分数，可以根据得分范围划定索引，比如0-59是fail，60-69是normal，70-79是good，80-89是great，90-100是excellent，则可以取除以10的商做索引：</p>
<pre><code>private static String getScore(int num)
{
    String[] scores = {&quot;normal&quot;, &quot;good&quot;, &quot;great&quot;, &quot;excellent&quot;};
    int level = num / 10;
    if (level &gt;= 6 &amp;&amp; level &lt;= 10)
    {
        return scores[level - 6];
    }
    return &quot;fail&quot;;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java集合数据结构]]></title>
        <id>https://zhongfei2016.github.io//post/shu-ju-jie-gou</id>
        <link href="https://zhongfei2016.github.io//post/shu-ju-jie-gou">
        </link>
        <updated>2019-09-28T08:23:09.000Z</updated>
        <content type="html"><![CDATA[<p>集合体系结构：<br>
<img src="https://zhongfei2016.github.io//post-images/1569663278987.png" alt=""><br>
<img src="https://zhongfei2016.github.io//post-images/1569664640861.png" alt=""><br>
<strong>Queue：</strong><br>
队列是数据结构中比较重要的一种类型，它支持 FIFO，尾部添加、头部删除（先进队列的元素先出队列），java中的Queue继承自 Collection 接口，用来存放 等待处理元素 的集合，这种场景一般用于缓冲、并发访问；Queue 一般都是 FIFO 的，但是也有例外，比如优先队列 priority queue（它的顺序是根据自然排序或者自定义 comparator 的）；再比如 LIFO 的队列（跟栈一样，后来进去的先出去）。</p>
<p><strong>Set：</strong><br>
继承于 Collection 接口，是一个不允许出现重复元素，并且无序的集合，主要 HashSet 和 TreeSet 两大实现类，HashSet 是哈希表结构，主要利用 HashMap 的 key 来存储元素，是无序的；TreeSet 是红黑树结构，每一个元素都是树中的一个节点，插入的元素都会进行排序；<br>
HashSet保证了元素的唯一性，而TreeSet除了唯一性，还保证了元素的顺序，所以TreeSet中的元素必须实现Comparable接口并重写compareTo()方法，其内部通过TreeMap实现，存进去的元素其实是TreeMap的key，而TreeMap是通过红黑树实现的数据结构，是一种自平衡的二叉查找树，所以可以保证key的唯一且有序性。<br>
TreeSet参考：https://www.jianshu.com/p/12f4dbdbc652</p>
<p><strong>List：</strong><br>
可以准确控制列表中每个元素的插入位置，另外可以通过整数索引（列表中的位置）访问元素，并搜索列表中的元素。List 通常允许重复的元素而且是有序的。<br>
• ArrayList：数组队列，相当于动态数组。它由数组实现，随机访问效率高，随机插入、随机删除效率低。<br>
• LinkedList：双向链表。它也可以被当作堆栈、队列或双端队列进行操作。LinkedList随机访问效率低，但随机插入、随机删除效率高。<br>
• Vector：是矢量队列，和ArrayList一样，它也是一个动态数组，由数组实现。但是ArrayList是非线程安全的，当多个线程同时使用一个ArrayList时，当又一个线程改变了ArrayList的内容时，需要用Collections.synchronizedList来同步，而Vector本身就是线程安全的，Vector的实现方法都是synchronized的，不过当Vector或ArrayList中的元素超过它的初始大小时,Vector会将它的容量翻倍,而ArrayList只增加50%的大小，这样,ArrayList就有利于节约内存空间。<br>
• Stack：栈(Stack)是一种有序特殊的线性表，只能在表的一端(称为栈顶，top，总是指向栈顶元素)执行插入和删除操作，最后插入的元素将第一个被删除，因此栈也称为后进先出(Last In First Out,LIFO)或先进后出(First In Last Out FILO)的线性表。栈的基本操作创建栈，判空，入栈，出栈，获取栈顶元素等，注意栈不支持对指定位置进行删除，插入。<br>
栈参考：https://blog.csdn.net/javazejian/article/details/53362993</p>
<p>上述List，Set，Queue均继承自Collection，由于Collection是Iterable的子类，所以List，Set，Queue都实现了自己的迭代器功能，通过迭代器访问List对于ArrayList和LinkedList有所不同，前者是通过访问内部维护的数组下标来实现的，后者则是通过访问内部链表当前元素指向的下一个元素实现的。</p>
<p>在遍历List时，有foreach和for index两种方式，其中for index循环是根据下标一个个检索获取，而foreach是通过迭代器Iterator，不断获取next元素。对于ArrayList来说，两种方式都是通过下标获取，效率没区别，但对于LinkedList来说，下标方式每次都要通过遍历链表获取下标，效率极低。</p>
<p><strong>Map：</strong><br>
HashMap主要用来存放键值对，它基于哈希表的Map接口实现，是常用的Java集合之一。与HashTable主要区别为不支持同步和允许null作为key和value，所以如果你想要保证线程安全，可以使用ConcurrentHashMap代替而不是线程安全的HashTable，因为HashTable基本已经被淘汰。</p>
<p>WeakHashMap：首先需要了解java强、软、弱、虚引用，然后才能理解。WeakHashMap就是使用弱引用WeakReference实现了Cache里不用的key数据自动清理的功能，WeakReference是JVM提供的一种机制能让我们感知到一个对象是否已经变成垃圾对象的类，WeakHashMap继承了WeakReference类并使用了他的清理机制。<br>
https://blog.csdn.net/xindoo/article/details/88093043<br>
https://www.cnblogs.com/xdouby/p/6701941.html<br>
https://www.cnblogs.com/xdouby/p/6793184.html</p>
<p><strong>树</strong><br>
• 完全二叉树：若设二叉树的深度为k，除第k层外，其他各层（1～（k-1）层）的节点数都达到最大值，且第k层所有的节点都连续集中在最左边，这样的树就是完全二叉树。<br>
<img src="https://zhongfei2016.github.io//post-images/1569659045946.png" alt=""><br>
• 非完全二叉树<br>
<img src="https://zhongfei2016.github.io//post-images/1569659053720.png" alt=""><br>
• 满二叉树<br>
• 平衡二叉树：平衡二叉树也叫自平衡二叉搜索树（Self-Balancing Binary Search Tree），所以其本质也是一颗二叉搜索树，不过为了限制左右子树的高度差，避免出现倾斜树等偏向于线性结构演化的情况，所以对二叉搜索树中每个节点的左右子树作了限制，左右子树的高度差称之为平衡因子，树中每个节点的平衡因子绝对值不大于 1，此时二叉搜索树称之为平衡二叉树。下图(a)1(a)2是平衡二叉树，(b)1(b)2是非平衡二叉树，对于(b)2，其-2节点左子树深度为0，右子树深度为2，所以不平衡。<br>
<img src="https://zhongfei2016.github.io//post-images/1569659091512.jpg" alt=""><br>
• 堆：每一个节点值都大于（小于）其叶子结点值，根节点是整个堆的最大（小）值。</p>
<p>https://github.com/Snailclimb/JavaGuide/blob/master/docs/dataStructures-algorithms/数据结构.md<br>
https://www.cnblogs.com/xdecode/p/9321848.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java数据类型及字长说明]]></title>
        <id>https://zhongfei2016.github.io//post/java-shu-ju-lei-xing-ji-zi-chang-shuo-ming</id>
        <link href="https://zhongfei2016.github.io//post/java-shu-ju-lei-xing-ji-zi-chang-shuo-ming">
        </link>
        <updated>2019-09-28T02:49:30.000Z</updated>
        <content type="html"><![CDATA[<p>在JAVA中一共有八种基本数据类型，他们分别是 ：<br>
byte<br>
short<br>
int<br>
long<br>
float<br>
double<br>
char<br>
boolean</p>
<p>其中byte、short、int、long都是表示整数的，只不过他们的取值范围不一样 ：<br>
<strong>byte</strong>的取值范围为-128~127，占用1个字节（-2的7次方到2的7次方-1）<br>
<strong>short</strong>的取值范围为-32768~32767，占用2个字节（-2的15次方到2的15次方-1）<br>
<strong>int</strong>的取值范围为（-2147483648~2147483647），占用4个字节（-2的31次方到2的31次方-1）<br>
<strong>long</strong>的取值范围为（-9223372036854774808~9223372036854774807），占用8个字节（-2的63次方到2的63次方-1）<br>
<strong>float</strong>占四个字节；double占八个字节；<br>
<strong>boolean</strong>只有true和false，占用的空间官方并没有给出准确的说法，需要看实际虚拟机的实现，《Java虚拟机规范》给出了单个boolean定义时虚拟机会编译成4个字节的int型，而boolean数组会编译为1个byte的说法，可参考：https://www.jianshu.com/p/2f663dc820d0<br>
<strong>char</strong>占两个字节，其中其前128位与ASCII码兼容。<br>
参考：https://www.cnblogs.com/singlesoar/p/5688915.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[排序算法示例]]></title>
        <id>https://zhongfei2016.github.io//post/pai-xu-suan-fa-shi-li</id>
        <link href="https://zhongfei2016.github.io//post/pai-xu-suan-fa-shi-li">
        </link>
        <updated>2019-09-22T08:58:39.000Z</updated>
        <content type="html"><![CDATA[<pre><code>import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class SortDemo
{
    public static final void main(String[] args)
    {
        int[] arrForSort = new int[]{3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48};
//        radixSort(arrForRadixSort, 100);
//        quickSort(arrForRadixSort, 0, 14);
//        selectSort(arrForRadixSort);
//        bubbleSort(arrForSort);
//        insertSort(arrForSort);
        shellSort(arrForSort);
        System.out.println(Arrays.toString(arrForSort));

    }

    /**
     * 基数排序
     *
     * @param array
     * @param d     基数值，比如10,100……
     */
    private static void radixSort(int[] array, int d)
    {
        int n = 1;//代表位数对应的数：1,10,100...
        int k = 0;//保存每一位排序后的结果用于下一位的排序输入
        int length = array.length;
        int[][] bucket = new int[10][length];//排序桶用于保存每次排序后的结果，这一位上排序结果相同的数字放在同一个桶里
        int[] order = new int[length];//用于保存每个桶里有多少个数字
        while (n &lt; d)
        {
            for (int num : array) //将数组array里的每个数字放在相应的桶里
            {
                int digit = (num / n) % 10;
                bucket[digit][order[digit]] = num;
                order[digit]++;
            }
            for (int i = 0; i &lt; length; i++)//将前一个循环生成的桶里的数据覆盖到原数组中用于保存这一位的排序结果
            {
                if (order[i] != 0)//这个桶里有数据，从上到下遍历这个桶并将数据保存到原数组中
                {
                    for (int j = 0; j &lt; order[i]; j++)
                    {
                        array[k] = bucket[i][j];
                        k++;
                    }
                }
                order[i] = 0;//将桶里计数器置0，用于下一次位排序
            }
            n *= 10;
            k = 0;//将k置0，用于下一轮保存位排序结果
        }
    }

    /**
     * 快速排序
     *
     * @param arr
     * @param left
     * @param right
     */
    private static void quickSort(int[] arr, int left, int right)
    {
        if (left &lt; right)
        {
            //先拆分找基准并将所有值中大的置于基准值右侧，小的置于基准值左侧
            int base = divideForQuickSort(arr, left, right);
            //然后最有两边分别快排，递归到每组只有一个值天然有序为止
            quickSort(arr, left, base - 1);
            quickSort(arr, base + 1, right);
        }

    }
		
		/**
     * 快速获取基准值方法
     *
     * @param arr
     * @param left
     * @param right
     */
    private static int divideForQuickSort(int[] arr, int left, int right)
    {
        //获取基准值，一般取左值，即第一个
        int base = arr[left];
        while (left &lt; right)
        {
            //右指针往左走找比基准值小的值
            while (left &lt; right &amp;&amp; arr[right] &gt;= base)
            {
                right--;
            }
            //直到找到比基准值小的值或者到达左指针，然后赋给左指针当前指向的位置
            arr[left] = arr[right];
            //左指针往右走找比基准值大的值
            while (left &lt; right &amp;&amp; arr[left] &lt;= base)
            {
                left++;
            }
            //直到找到比基准值大的值或者到达右指针，然后赋给右指针当前指向的位置
            arr[right] = arr[left];
        }
        //最后把基准值赋到左指针指向的当前位置，并返回新的基准位置
        //后面要以此位置拆分为两段分别比较
        arr[left] = base;
        return left;
    }

    /**
     * 选择排序
     *
     * @param arr
     */
    private static void selectSort(int[] arr)
    {
        if (arr == null || arr.length &lt;= 1)
        {
            return;
        }
        //从前面取第一个值跟后面所有值比较，比后面值大就交换位置，依次类推
        for (int i = 0; i &lt; arr.length - 1; i++)
        {
            for (int j = i + 1; j &lt; arr.length; j++)
            {
                if (arr[i] &gt; arr[j])
                {
                    swap(arr, i, j);
                }
            }
        }
    }

    /**
     * 冒泡排序
     *
     * @param arr
     */
    private static void bubbleSort(int[] arr)
    {
        if (arr == null || arr.length &lt;= 1)
        {
            return;
        }
        for (int i = arr.length - 1; i &gt; 0; i--)
        {
            //两两相邻比较，比后面的大就交换，一轮下来将最大值沉到最后
            for (int j = 0; j &lt; i; j++)
            {
                if (arr[j] &gt; arr[j + 1])
                {
                    swap(arr, j, j + 1);
                }
            }
        }
    }

    /**
     * 插入排序
     *
     * @param arr
     */
    private static void insertSort(int[] arr)
    {
        if (arr == null || arr.length &lt;= 1)
        {
            return;
        }
        //第一个天然有序不比较，跳过，所以i从1开始
        for (int i = 1; i &lt; arr.length; i++)
        {
            //从当前i位置往前比较，后面比前面小就交换，否则结束比较
            //只比较相邻值，因为前面序列默认已有序，从后往前找到比当前值大的就交换，直到比当前小就可以停止
            for (int j = i; j &gt;= 1; j--)
            {
                if (arr[j] &lt; arr[j - 1])
                {
                    swap(arr, j, j - 1);
                }
            }
        }
    }

    /**
     * 希尔排序
     *
     * @param arr
     */
    private static void shellSort(int[] arr)
    {
        if (arr == null || arr.length &lt;= 1)
        {
            return;
        }
        //计算跨增量的值
        int gap = arr.length;
        List&lt;Integer&gt; gapList = new ArrayList&lt;Integer&gt;();
        while ((gap = gap / 2) &gt;= 1)
        {
            gapList.add(gap);
        }

        for (int gapItem : gapList)
        {
            //插入排序，只不过是跨增量插入排序
            for (int i = 1 + gapItem; i &lt; arr.length; i++)
            {
                for (int j = i; j &gt;= 1 &amp;&amp; j - gapItem &gt;= 0; j -= gapItem)
                {
                    if (arr[j] &lt; arr[j - gapItem])
                    {
                        swap(arr, j, j - gapItem);
                    }
                }
            }
        }
    }
		
    /**
     * 归并排序
     *
     * @param arr
     * @param left
     * @param right
     */
    private static void mergeSort(int[] arr, int left, int right)
    {
        if (left == right)
        {
            return;
        }
        int middle = left + ((right - left) &gt;&gt; 1);
        mergeSort(arr, left, middle);
        mergeSort(arr, middle + 1, right);
        merge(arr, left, middle, right);
    }

    /**
     * 归并排序归并左右组方法
     *
     * @param arr
     * @param left
     * * @param middle
     * @param right
     */
    private static void merge(int[] arr, int left, int middle, int right)
    {
        int[] temp = new int[right - left + 1];
        //往temp存所需的索引
        int idx = 0;
        //以middle为分界点，左边组的起点
        int pLeft = left;
        //右边组的起点
        int pRight = middle + 1;
        //左右两边都小于其终点时比较对应值
        //左右两列都从一个元素开始，天然有序，所以对应位比较,小的放到temp数组里
        while (pLeft &lt;= middle &amp;&amp; pRight &lt;= right)
        {
            temp[idx++] = arr[pLeft] &lt; arr[pRight] ? arr[pLeft++] : arr[pRight++];
        }
        //左组有剩余则追加到temp数组
        while (pLeft &lt;= middle)
        {
            temp[idx++] = arr[pLeft++];
        }
        //右组有剩余则追加到temp数组
        while (pRight &lt;= right)
        {
            temp[idx++] = arr[pRight++];
        }
        //最后放回到原数组
        for (int i = 0; i &lt; idx; i++)
        {
            arr[left++] = temp[i];
        }
    }

    /**
     * 计数排序，一般用于跨度不大的整数数组排序
     *
     * @param arr
     * @return
     */
    public static int[] countSort(int[] arr) {
        //求最大值最小值计算临时数组大小
        int min = min(arr);
        int max = max(arr);
        int[] arrTemp = new int[max - min + 1];
        //将每个值的出现次数放在临时数组对应位置
        for (int i : arr) {
            arrTemp[i - min]++;
        }
        //将每个值的次数都加上前面值次数的累加值，计算出每个值的绝对位置
        for (int i = 1; i &lt; arrTemp.length; i++) {
            arrTemp[i] += arrTemp[i - 1];
        }
        //arr[i] - min]取出当前值在arrTemp的位置，根据位置取出其在arrTemp的绝对位置
        //由于取出的绝对位置是包括本数字之前数字所有出现次数的累加，所以转成数组真实位置需要减1
        //取出后arrTemp中的累计次数需要对应减1
        int[] sortedArray = new int[arr.length];
        for (int i = 0; i &lt; arr.length; i++) {
            sortedArray[arrTemp[arr[i] - min] - 1] = arr[i];
            arrTemp[arr[i] - min]--;
        }
        return sortedArray;
    }

    public static int min(int[] arr) {
        if (arr == null || arr.length &lt; 1) {
            return 0;
        }
        int min = 0;
        for (int item : arr) {
            if (item &lt; min) {
                min = item;
            }
        }
        return min;
    }

    public static int max(int[] arr) {
        if (arr == null || arr.length &lt; 1) {
            return 0;
        }
        int max = 0;
        for (int item : arr) {
            if (item &gt; max) {
                max = item;
            }
        }
        return max;
    }

    private static void swap(int[] arr, int i, int j)
    {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[统计list中连续超阈值n次的次数]]></title>
        <id>https://zhongfei2016.github.io//post/tong-ji-list-zhong-lian-xu-chao-yu-zhi-n-ci-de-ci-shu</id>
        <link href="https://zhongfei2016.github.io//post/tong-ji-list-zhong-lian-xu-chao-yu-zhi-n-ci-de-ci-shu">
        </link>
        <updated>2019-09-13T06:18:41.000Z</updated>
        <content type="html"><![CDATA[<p>一个Double类型的list，求取此list中元素值连续大于一个阈值n次（n可以修改）的总次数，比如阈值是4，list中所有元素为：1,5,7,3,4,8,11,1,7,1，要求连续2次超过阈值才计次，那么结果应该是2次，5,7一次，4,8,11一次，7虽然大于4，但由于前后均小于4，所以不计次，代码实现如下：</p>
<pre><code>    /**
     * 
     * @param list 要统计的列表
     * @param threshold 阈值
     * @param count 要求超阈值连续次数
     * @return
     */
    public static int calExceedNum(List&lt;Double&gt; list, double threshold, int count)
    {
        //符合要求的次数
        int cnt = 0;
        //单次连续超阈值的次数
        int continueCnt = 0;
        for (int i = 0; i &lt; list.size(); i++)
        {
            if (list.get(i) &lt; threshold)
            {
                continueCnt = 0;
                continue;
            }
            else
            {
                continueCnt++;
            }
            if(continueCnt==count)
            {
                cnt++;
            }
        }
        return cnt;
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[排序算法总结]]></title>
        <id>https://zhongfei2016.github.io//post/pai-xu-suan-fa-zong-jie</id>
        <link href="https://zhongfei2016.github.io//post/pai-xu-suan-fa-zong-jie">
        </link>
        <updated>2019-09-08T08:53:58.000Z</updated>
        <content type="html"><![CDATA[<p>排序方法有快速排序、希尔排序、归并排序、插入排序、选择排序、冒泡排序等。</p>
<h2 id="排序稳定性"><strong>排序稳定性</strong></h2>
<p>排序前后在序列里两个相等的数在序列中原始的前后位置顺序，在排序后不发生改变，即排序前，ai=aj，且ai在aj之前，则排序后，ai仍在aj之前。</p>
<p><strong>选择排序</strong>：<br>
时间复杂度O(n^2)，需要一个额外交换用空间，空间复杂度O(1)</p>
<p>从第一个开始，拿第一个和后面的每一个元素比较，第一个比后面的大就交换两者，一直比到最后一个元素，这样第一轮就找到了最小值，第二轮从第二个元素开始，以此类推。有这样的序列：a1，a2，b，当前元素a1比其后面一个元素b大，且其后面这个元素b在另一个与当前元素a1相等的元素a2后面，如果a1比b大，则a1会和b交换，原来a1在a2前面，a1和b交换后变为b，a2，a1，a1和a2顺序颠倒，所以其为不稳定排序。</p>
<p><strong>冒泡排序</strong>：<br>
需要n*(n+1)/2个循环，时间复杂度O(n^2)，需要一个额外交换用空间，空间复杂度O(1)</p>
<p>从第一个元素开始，只跟后一个元素比较，如果前一个比后一个大则两者交换，那一轮过后最大的沉到最后面，第二轮再前n-1个元素比较，找出倒数第二大的元素，以此类推，由于只是交换相邻的两个元素，相等的话不会交换，即便两个相等元素不相邻，几次交换后也会相邻且也不会交换，所以是稳定排序。</p>
<p><strong>插入排序</strong>：<br>
需要n*(n+1)/2个循环，时间复杂度O(n^2)，需要一个额外交换用空间，空间复杂度O(1)</p>
<p>将后面元素插入既定序列中（既定序列起始只有一个值），将既定序列后面拿出的待插入元素从既定序列的最后一个元素往前比较，遇到比他小或相等的就插到其后面，比如原始数组为1，5，4，8，3，2，其中开始认定1为既定序列，由于只有一个值所以天然有序，然后拿5跟1比较，由于比1大，所以不动，此时既定序列变为1，5，仍有序，然后拿4与当前既定序列比较，先跟5比，比5小，再跟1比，4遇到比他小的1要插到1后面，既定序列变为1，4，5，以此类推，此方式不改变相等元素顺序，所以是稳定排序。</p>
<p>对于规模比较小且基本有序的序列，效率很高。</p>
<p><strong>希尔排序</strong>：<br>
时间复杂度由O(n)到O(n^2)不定，一般是由增量序列决定，空间复杂度与插入类似，为O(1)</p>
<p>插入排序的一种改良方案，将序列先按增量分组，然后各组进行插入排序，逐渐增大每个分组的元素个数，直到只有一个分组为止，再进行一次插入排序，虽然插入排序本身是稳定的，但是由于跨增量分组进行，每组中相等的元素和同组其他元素比较大小不一定是否调换位置，所以会改变相等元素的相对位置，比如：</p>
<p>573154，分三组比较时，51一组，75一组，34一组，第一个5和1比较，交换了位置，7和第二个5比较，交换了位置，导致第二个5跑到了第一个5前面，即变为153574，所以不稳定，下面的举例图示比较直观：<br>
<img src="https://zhongfei2016.github.io//post-images/1567933310768.png" alt=""></p>
<p><strong>快速排序：</strong><br>
时间复杂度：可以理解为每次拆成两组，组数相当于每次×2，拆前为2<sup>0=1组，拆一次为2</sup>1=2组，假设x次后比较完所有n个元素，就是拆到最后每组一个元素，共n组，2<sup>x=n，那x=log(2)(n)，且每次要比n个元素，那就是nlog(2)(n)，即O(nlogn)，空间复杂度：快速排序使用分治方式，每次拆两组，每组都需要一个额外空间放中心值，即2</sup>x=n，x=log(2)(n)，因此它的空间复杂度为O(logn)</p>
<p>采用分治的方式，选定中心值（英文为pivot，需要理解的是中心值并不在中心位置），无序度大的数组一般取第一个值，无序度小的数组一般取随机值，然后进行分组，分组分左右两边进行，右指针右起找比中心值小的数或者直到遇到左指针，把其指向的数赋给左指针（如果直到遇到左指针都没有找到比中心值小的数，相当于把左指针指向的数赋给左指针，左指针操作与此类似），左指针左起找比中心值大的数或者直到遇到右指针，把其指向的数赋给右指针，最后把中心值赋给左右指针相遇的位置，此位置其实是本轮排序的中心位置，之后拆为左右部分继续按此排序，直到只有一个元素为止，也有一种方式为，最右侧值a[j]的下标j先从右往左找一个小于中心值的数，与当前a[i]交换，再由a[i]的下标i从左往右找一个大于中心值的数，与当前a[j]交换他们对应的值，直到j和i相遇，则交换中心值和a[i]的值，本轮结束后再按中心值拆成两边再继续按上述方式比较直到比较的两边只有一个元素为止。</p>
<p>对于稳定性，比如5 3a 6 3b，第一轮j向左找比5小的，即3b，然后i向右找比5大的，即6，交换得到5 3a 3b 6，j继续向左找到3b，i向右遇到j，5和3b交换得到3b 3a 5 6，此时3a，3b顺序打乱，所以不稳定。</p>
<p>参考：https://www.jianshu.com/p/5f38dd54b11f</p>
<p><strong>归并排序：</strong><br>
分治方式，时间复杂度O(nlogn)，需要一个与原数组同等大小的临时空间存放有序数组，空间复杂度O(n)</p>
<p>采用递归分治的方式，将原数组不断从中间拆成2组，直到拆成每组只有一个，即为天然有序，合并时，两组分别从头开始取元素比较，较小的值放到临时数组里，临时数组大小与两组待比较数组大小之和相等，比较完总有一组先比完，有剩余的一组的所有剩余值直接追加到临时数组的后面，当前两组就排序完了，然后再递归上去直到结束，由于在合并过程中只要保证相等的情况下前面序列的元素放在前面，整个迭代过程中就不会打乱相同值的顺序，所以是稳定的。</p>
<p>参考：https://www.jianshu.com/p/95c69f8e47e7</p>
<p><strong>堆排序：</strong><br>
分治方式，时间复杂度O(nlogn)，排序虽然递归，但只是用了额外一个元素空间用于交换，空间复杂度为O(1)</p>
<p>第一个元素作为根节点，如果根节点的索引是i，则其左右节点的索引为2<em>i+1和2</em>i+2，比如根节点索引为0，则其左右节点索引分别为1和2，从第一个节点开始，只要他比父节点大，就跟父节点交换，直到没有父节点或者父节点最大为止，这是一个递归过程，由于每次都是左右两个节点在比较，所以可能出现调换，比如4，5，3，3，1，7，2这个数组，5的子节点是第二个3和1，第一个3的子节点是7和2，5和第二个3和1比较都不换位置，但是第一个3和7比较会交换位置，导致两个3位置颠倒，所以是不稳定排序。<br>
<img src="https://zhongfei2016.github.io//post-images/1568427588848.png" alt=""><br>
参考：https://www.jianshu.com/p/3e1d4ed98565</p>
<p><strong>基数排序：</strong><br>
时间复杂度O(nk)，k为元素最大位数，是常数，空间复杂度维n+t，t是存放按当前位排序的临时数组，也是常数。</p>
<p>按照每个元素的个位、十位、百位依次来排序，可以定义一个二维数组，其中第一维固定大小为10，即0~9，代表每一位可能的十个数字，第二维则设置大小为有所有元素个数，因为最大可能就是待排序的数组所有的元素某一位都相同，比如待排序数组为1，21，51，41，那二维数组为arr[10][4]，按个位排序时，arr[1]这一维是满的，因为所有四个数字个位都是1，所以都放到这一维中，即arr[1][0]=1，arr[1][1]=21，arr[1][2]=51，arr[1][3]=41，排完之后放回原数组，虽然好像个位这一轮排序并没有效果，但是按十位再向二维数组放一遍，就会得到结果了，十位的二维数组放置结果是arr[0][0]=1，arr[2][0]=21，arr[4][0]=41，arr[5][0]=51，这时候再按顺序拿出来，就已经是排好序的了，如果相同位数有多个值，比如还有个55，由于个位排序时55在arr[5][4]这里，所以放回原数组的时候，55也在51后面，按十位排序的时候，arr[5]这一维就会是天然保证arr[5][0]=51，arr[5][1]=55，此时放回原数组的时候顺序也是对的。对于两个相同的值，不论比较哪一维都会放在二维数组同一维前后位置，且顺序也会原始数组相同，不会交换，所以是稳定排序。<br>
参考：https://www.jianshu.com/p/8340dfaea3af</p>
<p><strong>各排序复杂度一览</strong><br>
<img src="https://zhongfei2016.github.io//post-images/1568427630041.png" alt=""></p>
<p>选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，而冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法，其实综合来看，只要存在跨增量互换的排序，都是不稳定的排序，而单纯的相邻互换，或者插入排序，都是稳定的排序。</p>
<p>稳定性总结可以参考：https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html</p>
<h2 id="各排序方法使用场景">各排序方法使用场景：</h2>
<p>当应用到已经排序好的或者基本排序好的数组上时，归并排序的时间复杂度最低。</p>
]]></content>
    </entry>
</feed>